/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 1.0.0
 * apidoc:0.11.27 http://www.apidoc.me/gilt/gilt-public-api/1.0.0/play_2_4_client
 */
package com.gilt.public.api.models {

  case class Product(
    name: String,
    product: String,
    id: Long,
    brand: String,
    url: String,
    content: com.gilt.public.api.models.ProductContent,
    categories: Seq[String],
    imageUrls: _root_.play.api.libs.json.JsObject,
    skus: Seq[com.gilt.public.api.models.Sku]
  )

  case class ProductCategories(
    categories: Seq[String]
  )

  case class ProductContent(
    description: _root_.scala.Option[String] = None,
    fitNotes: _root_.scala.Option[String] = None,
    material: _root_.scala.Option[String] = None,
    careInstructions: _root_.scala.Option[String] = None,
    origin: _root_.scala.Option[String] = None
  )

  case class SaleDetail(
    name: String,
    sale: String,
    saleKey: String,
    store: com.gilt.public.api.models.Store,
    description: _root_.scala.Option[String] = None,
    saleUrl: String,
    begins: _root_.org.joda.time.DateTime,
    ends: _root_.scala.Option[_root_.org.joda.time.DateTime] = None,
    imageUrls: _root_.play.api.libs.json.JsObject,
    products: _root_.scala.Option[Seq[String]] = None
  )

  case class SaleList(
    sales: Seq[com.gilt.public.api.models.SaleDetail]
  )

  case class Sku(
    id: Long,
    inventoryStatus: String,
    msrpPrice: BigDecimal,
    salePrice: BigDecimal,
    shippingSurcharge: _root_.scala.Option[BigDecimal] = None,
    attributes: Seq[_root_.play.api.libs.json.JsObject]
  )

  /**
   * Gilt.com is divided into stores. Currently there are four stores exposed by the
   * API: Women, Men, Baby & Kids and Home.
   */
  sealed trait Store

  object Store {

    case object Women extends Store { override def toString = "women" }
    case object Men extends Store { override def toString = "men" }
    case object Kids extends Store { override def toString = "kids" }
    case object Home extends Store { override def toString = "home" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Store

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Women, Men, Kids, Home)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Store = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Store] = byName.get(value.toLowerCase)

  }

}

package com.gilt.public.api.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.gilt.public.api.models.json._

    private[api] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[api] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[api] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[api] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsGiltPublicApiStore = new play.api.libs.json.Reads[com.gilt.public.api.models.Store] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.gilt.public.api.models.Store] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.gilt.public.api.models.Store(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.gilt.public.api.models.Store(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesGiltPublicApiStore(obj: com.gilt.public.api.models.Store) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectStore(obj: com.gilt.public.api.models.Store) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesGiltPublicApiStore: play.api.libs.json.Writes[Store] = {
      new play.api.libs.json.Writes[com.gilt.public.api.models.Store] {
        def writes(obj: com.gilt.public.api.models.Store) = {
          jsonWritesGiltPublicApiStore(obj)
        }
      }
    }

    implicit def jsonReadsGiltPublicApiProduct: play.api.libs.json.Reads[Product] = {
      (
        (__ \ "name").read[String] and
        (__ \ "product").read[String] and
        (__ \ "id").read[Long] and
        (__ \ "brand").read[String] and
        (__ \ "url").read[String] and
        (__ \ "content").read[com.gilt.public.api.models.ProductContent] and
        (__ \ "categories").read[Seq[String]] and
        (__ \ "image_urls").read[_root_.play.api.libs.json.JsObject] and
        (__ \ "skus").read[Seq[com.gilt.public.api.models.Sku]]
      )(Product.apply _)
    }

    def jsObjectProduct(obj: com.gilt.public.api.models.Product) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "product" -> play.api.libs.json.JsString(obj.product),
        "id" -> play.api.libs.json.JsNumber(obj.id),
        "brand" -> play.api.libs.json.JsString(obj.brand),
        "url" -> play.api.libs.json.JsString(obj.url),
        "content" -> jsObjectProductContent(obj.content),
        "categories" -> play.api.libs.json.Json.toJson(obj.categories),
        "image_urls" -> obj.imageUrls,
        "skus" -> play.api.libs.json.Json.toJson(obj.skus)
      )
    }

    implicit def jsonWritesGiltPublicApiProduct: play.api.libs.json.Writes[Product] = {
      new play.api.libs.json.Writes[com.gilt.public.api.models.Product] {
        def writes(obj: com.gilt.public.api.models.Product) = {
          jsObjectProduct(obj)
        }
      }
    }

    implicit def jsonReadsGiltPublicApiProductCategories: play.api.libs.json.Reads[ProductCategories] = {
      (__ \ "categories").read[Seq[String]].map { x => new ProductCategories(categories = x) }
    }

    def jsObjectProductCategories(obj: com.gilt.public.api.models.ProductCategories) = {
      play.api.libs.json.Json.obj(
        "categories" -> play.api.libs.json.Json.toJson(obj.categories)
      )
    }

    implicit def jsonWritesGiltPublicApiProductCategories: play.api.libs.json.Writes[ProductCategories] = {
      new play.api.libs.json.Writes[com.gilt.public.api.models.ProductCategories] {
        def writes(obj: com.gilt.public.api.models.ProductCategories) = {
          jsObjectProductCategories(obj)
        }
      }
    }

    implicit def jsonReadsGiltPublicApiProductContent: play.api.libs.json.Reads[ProductContent] = {
      (
        (__ \ "description").readNullable[String] and
        (__ \ "fit_notes").readNullable[String] and
        (__ \ "material").readNullable[String] and
        (__ \ "care_instructions").readNullable[String] and
        (__ \ "origin").readNullable[String]
      )(ProductContent.apply _)
    }

    def jsObjectProductContent(obj: com.gilt.public.api.models.ProductContent) = {
      (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.fitNotes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("fit_notes" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.material match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("material" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.careInstructions match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("care_instructions" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.origin match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("origin" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesGiltPublicApiProductContent: play.api.libs.json.Writes[ProductContent] = {
      new play.api.libs.json.Writes[com.gilt.public.api.models.ProductContent] {
        def writes(obj: com.gilt.public.api.models.ProductContent) = {
          jsObjectProductContent(obj)
        }
      }
    }

    implicit def jsonReadsGiltPublicApiSaleDetail: play.api.libs.json.Reads[SaleDetail] = {
      (
        (__ \ "name").read[String] and
        (__ \ "sale").read[String] and
        (__ \ "sale_key").read[String] and
        (__ \ "store").read[com.gilt.public.api.models.Store] and
        (__ \ "description").readNullable[String] and
        (__ \ "sale_url").read[String] and
        (__ \ "begins").read[_root_.org.joda.time.DateTime] and
        (__ \ "ends").readNullable[_root_.org.joda.time.DateTime] and
        (__ \ "image_urls").read[_root_.play.api.libs.json.JsObject] and
        (__ \ "products").readNullable[Seq[String]]
      )(SaleDetail.apply _)
    }

    def jsObjectSaleDetail(obj: com.gilt.public.api.models.SaleDetail) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "sale" -> play.api.libs.json.JsString(obj.sale),
        "sale_key" -> play.api.libs.json.JsString(obj.saleKey),
        "store" -> play.api.libs.json.JsString(obj.store.toString),
        "sale_url" -> play.api.libs.json.JsString(obj.saleUrl),
        "begins" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.begins)),
        "image_urls" -> obj.imageUrls
      ) ++ (obj.description match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("description" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.ends match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("ends" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x)))
      }) ++
      (obj.products match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("products" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesGiltPublicApiSaleDetail: play.api.libs.json.Writes[SaleDetail] = {
      new play.api.libs.json.Writes[com.gilt.public.api.models.SaleDetail] {
        def writes(obj: com.gilt.public.api.models.SaleDetail) = {
          jsObjectSaleDetail(obj)
        }
      }
    }

    implicit def jsonReadsGiltPublicApiSaleList: play.api.libs.json.Reads[SaleList] = {
      (__ \ "sales").read[Seq[com.gilt.public.api.models.SaleDetail]].map { x => new SaleList(sales = x) }
    }

    def jsObjectSaleList(obj: com.gilt.public.api.models.SaleList) = {
      play.api.libs.json.Json.obj(
        "sales" -> play.api.libs.json.Json.toJson(obj.sales)
      )
    }

    implicit def jsonWritesGiltPublicApiSaleList: play.api.libs.json.Writes[SaleList] = {
      new play.api.libs.json.Writes[com.gilt.public.api.models.SaleList] {
        def writes(obj: com.gilt.public.api.models.SaleList) = {
          jsObjectSaleList(obj)
        }
      }
    }

    implicit def jsonReadsGiltPublicApiSku: play.api.libs.json.Reads[Sku] = {
      (
        (__ \ "id").read[Long] and
        (__ \ "inventory_status").read[String] and
        (__ \ "msrp_price").read[BigDecimal] and
        (__ \ "sale_price").read[BigDecimal] and
        (__ \ "shipping_surcharge").readNullable[BigDecimal] and
        (__ \ "attributes").read[Seq[_root_.play.api.libs.json.JsObject]]
      )(Sku.apply _)
    }

    def jsObjectSku(obj: com.gilt.public.api.models.Sku) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id),
        "inventory_status" -> play.api.libs.json.JsString(obj.inventoryStatus),
        "msrp_price" -> play.api.libs.json.JsNumber(obj.msrpPrice),
        "sale_price" -> play.api.libs.json.JsNumber(obj.salePrice),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.shippingSurcharge match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("shipping_surcharge" -> play.api.libs.json.JsNumber(x))
      })
    }

    implicit def jsonWritesGiltPublicApiSku: play.api.libs.json.Writes[Sku] = {
      new play.api.libs.json.Writes[com.gilt.public.api.models.Sku] {
        def writes(obj: com.gilt.public.api.models.Sku) = {
          jsObjectSku(obj)
        }
      }
    }
  }
}

package com.gilt.public.api {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.gilt.public.api.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Store
    private[this] val enumStoreNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.gilt.public.api.models.Store.all.mkString(", ")}"

    implicit val pathBindableEnumStore = new PathBindable.Parsing[com.gilt.public.api.models.Store] (
      Store.fromString(_).get, _.toString, enumStoreNotFound
    )

    implicit val queryStringBindableEnumStore = new QueryStringBindable.Parsing[com.gilt.public.api.models.Store](
      Store.fromString(_).get, _.toString, enumStoreNotFound
    )

  }

}


package com.gilt.public.api {

  object Constants {

    val BaseUrl = "https://api.gilt.com/v1"
    val Namespace = "com.gilt.public.api"
    val UserAgent = "apidoc:0.11.27 http://www.apidoc.me/gilt/gilt-public-api/1.0.0/play_2_4_client"
    val Version = "1.0.0"
    val VersionMajor = 1

  }

  class Client(
    val baseUrl: String = "https://api.gilt.com/v1",
    auth: scala.Option[com.gilt.public.api.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.gilt.public.api.models.json._

    private[this] val logger = play.api.Logger("com.gilt.public.api.Client")

    logger.info(s"Initializing com.gilt.public.api.Client for url $baseUrl")

    def products: Products = Products

    def saleDetails: SaleDetails = SaleDetails

    def saleList: SaleList = SaleList

    object Products extends Products {
      override def getDetailJsonByProductId(
        productId: String,
        apikey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.Product] = {
        val queryParameters = Seq(
          Some("apikey" -> apikey)
        ).flatten

        _executeRequest("GET", s"/products/${play.utils.UriEncoding.encodePathSegment(productId, "UTF-8")}/detail.json", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.public.api.Client.parseJson("com.gilt.public.api.models.Product", r, _.validate[com.gilt.public.api.models.Product])
          case r => throw new com.gilt.public.api.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getCategoriesJson(
        apikey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.ProductCategories] = {
        val queryParameters = Seq(
          Some("apikey" -> apikey)
        ).flatten

        _executeRequest("GET", s"/products/categories.json", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.public.api.Client.parseJson("com.gilt.public.api.models.ProductCategories", r, _.validate[com.gilt.public.api.models.ProductCategories])
          case r => throw new com.gilt.public.api.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object SaleDetails extends SaleDetails {
      override def getDetailJson(
        store: com.gilt.public.api.models.Store,
        sale: String,
        apikey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleDetail] = {
        val queryParameters = Seq(
          Some("apikey" -> apikey)
        ).flatten

        _executeRequest("GET", s"/sales/${play.utils.UriEncoding.encodePathSegment(store.toString, "UTF-8")}/${play.utils.UriEncoding.encodePathSegment(sale, "UTF-8")}detail.json", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.public.api.Client.parseJson("com.gilt.public.api.models.SaleDetail", r, _.validate[com.gilt.public.api.models.SaleDetail])
          case r => throw new com.gilt.public.api.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    object SaleList extends SaleList {
      override def getActiveJson(
        apikey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleList] = {
        val queryParameters = Seq(
          Some("apikey" -> apikey)
        ).flatten

        _executeRequest("GET", s"/sales/active.json", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.public.api.Client.parseJson("com.gilt.public.api.models.SaleList", r, _.validate[com.gilt.public.api.models.SaleList])
          case r => throw new com.gilt.public.api.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getActiveJsonByStore(
        store: String,
        apikey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleList] = {
        val queryParameters = Seq(
          Some("apikey" -> apikey)
        ).flatten

        _executeRequest("GET", s"/sales/${play.utils.UriEncoding.encodePathSegment(store, "UTF-8")}/active.json", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.public.api.Client.parseJson("com.gilt.public.api.models.SaleList", r, _.validate[com.gilt.public.api.models.SaleList])
          case r => throw new com.gilt.public.api.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getUpcomingJson(
        apikey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleList] = {
        val queryParameters = Seq(
          Some("apikey" -> apikey)
        ).flatten

        _executeRequest("GET", s"/sales/upcoming.json", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.public.api.Client.parseJson("com.gilt.public.api.models.SaleList", r, _.validate[com.gilt.public.api.models.SaleList])
          case r => throw new com.gilt.public.api.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }

      override def getUpcomingJsonByStore(
        store: String,
        apikey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleList] = {
        val queryParameters = Seq(
          Some("apikey" -> apikey)
        ).flatten

        _executeRequest("GET", s"/sales/${play.utils.UriEncoding.encodePathSegment(store, "UTF-8")}/upcoming.json", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.public.api.Client.parseJson("com.gilt.public.api.models.SaleList", r, _.validate[com.gilt.public.api.models.SaleList])
          case r => throw new com.gilt.public.api.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.gilt.public.api.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def products: com.gilt.public.api.Products
      def saleDetails: com.gilt.public.api.SaleDetails
      def saleList: com.gilt.public.api.SaleList
    }

  }

  trait Products {
    def getDetailJsonByProductId(
      productId: String,
      apikey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.Product]

    def getCategoriesJson(
      apikey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.ProductCategories]
  }

  trait SaleDetails {
    def getDetailJson(
      store: com.gilt.public.api.models.Store,
      sale: String,
      apikey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleDetail]
  }

  trait SaleList {
    def getActiveJson(
      apikey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleList]

    def getActiveJsonByStore(
      store: String,
      apikey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleList]

    def getUpcomingJson(
      apikey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleList]

    def getUpcomingJsonByStore(
      store: String,
      apikey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.public.api.models.SaleList]
  }

  package errors {

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}