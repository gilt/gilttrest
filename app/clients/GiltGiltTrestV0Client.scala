/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.9-dev
 * apidoc:0.11.27 http://www.apidoc.me/gilt/gilt-trest/0.0.9-dev/play_2_4_client
 */
package com.gilt.gilt.trest.v0.models {

  case class Error(
    error: String
  )

  case class LoginForm(
    username: String,
    password: String
  )

  case class Pin(
    saleKey: String,
    expiresAt: _root_.org.joda.time.DateTime
  )

  case class PinnedSale(
    pinned: Boolean,
    detail: com.gilt.public.api.models.SaleDetail
  )

  case class RegisterForm(
    name: String,
    username: String,
    password: String
  )

  case class User(
    id: Int,
    name: String,
    username: String
  )

  sealed trait Store

  object Store {

    case object Men extends Store { override def toString = "men" }
    case object Women extends Store { override def toString = "women" }
    case object Children extends Store { override def toString = "children" }
    case object Home extends Store { override def toString = "home" }
    case object Pinned extends Store { override def toString = "pinned" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends Store

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all = Seq(Men, Women, Children, Home, Pinned)

    private[this]
    val byName = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): Store = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[Store] = byName.get(value.toLowerCase)

  }

}

package com.gilt.gilt.trest.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import com.gilt.gilt.trest.v0.models.json._
    import com.gilt.public.api.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsGiltTrestStore = new play.api.libs.json.Reads[com.gilt.gilt.trest.v0.models.Store] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[com.gilt.gilt.trest.v0.models.Store] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(com.gilt.gilt.trest.v0.models.Store(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(com.gilt.gilt.trest.v0.models.Store(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesGiltTrestStore(obj: com.gilt.gilt.trest.v0.models.Store) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectStore(obj: com.gilt.gilt.trest.v0.models.Store) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesGiltTrestStore: play.api.libs.json.Writes[Store] = {
      new play.api.libs.json.Writes[com.gilt.gilt.trest.v0.models.Store] {
        def writes(obj: com.gilt.gilt.trest.v0.models.Store) = {
          jsonWritesGiltTrestStore(obj)
        }
      }
    }

    implicit def jsonReadsGiltTrestError: play.api.libs.json.Reads[Error] = {
      (__ \ "error").read[String].map { x => new Error(error = x) }
    }

    def jsObjectError(obj: com.gilt.gilt.trest.v0.models.Error) = {
      play.api.libs.json.Json.obj(
        "error" -> play.api.libs.json.JsString(obj.error)
      )
    }

    implicit def jsonWritesGiltTrestError: play.api.libs.json.Writes[Error] = {
      new play.api.libs.json.Writes[com.gilt.gilt.trest.v0.models.Error] {
        def writes(obj: com.gilt.gilt.trest.v0.models.Error) = {
          jsObjectError(obj)
        }
      }
    }

    implicit def jsonReadsGiltTrestLoginForm: play.api.libs.json.Reads[LoginForm] = {
      (
        (__ \ "username").read[String] and
        (__ \ "password").read[String]
      )(LoginForm.apply _)
    }

    def jsObjectLoginForm(obj: com.gilt.gilt.trest.v0.models.LoginForm) = {
      play.api.libs.json.Json.obj(
        "username" -> play.api.libs.json.JsString(obj.username),
        "password" -> play.api.libs.json.JsString(obj.password)
      )
    }

    implicit def jsonWritesGiltTrestLoginForm: play.api.libs.json.Writes[LoginForm] = {
      new play.api.libs.json.Writes[com.gilt.gilt.trest.v0.models.LoginForm] {
        def writes(obj: com.gilt.gilt.trest.v0.models.LoginForm) = {
          jsObjectLoginForm(obj)
        }
      }
    }

    implicit def jsonReadsGiltTrestPin: play.api.libs.json.Reads[Pin] = {
      (
        (__ \ "sale_key").read[String] and
        (__ \ "expires_at").read[_root_.org.joda.time.DateTime]
      )(Pin.apply _)
    }

    def jsObjectPin(obj: com.gilt.gilt.trest.v0.models.Pin) = {
      play.api.libs.json.Json.obj(
        "sale_key" -> play.api.libs.json.JsString(obj.saleKey),
        "expires_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.expiresAt))
      )
    }

    implicit def jsonWritesGiltTrestPin: play.api.libs.json.Writes[Pin] = {
      new play.api.libs.json.Writes[com.gilt.gilt.trest.v0.models.Pin] {
        def writes(obj: com.gilt.gilt.trest.v0.models.Pin) = {
          jsObjectPin(obj)
        }
      }
    }

    implicit def jsonReadsGiltTrestPinnedSale: play.api.libs.json.Reads[PinnedSale] = {
      (
        (__ \ "pinned").read[Boolean] and
        (__ \ "detail").read[com.gilt.public.api.models.SaleDetail]
      )(PinnedSale.apply _)
    }

    def jsObjectPinnedSale(obj: com.gilt.gilt.trest.v0.models.PinnedSale) = {
      play.api.libs.json.Json.obj(
        "pinned" -> play.api.libs.json.JsBoolean(obj.pinned),
        "detail" -> com.gilt.public.api.models.json.jsObjectSaleDetail(obj.detail)
      )
    }

    implicit def jsonWritesGiltTrestPinnedSale: play.api.libs.json.Writes[PinnedSale] = {
      new play.api.libs.json.Writes[com.gilt.gilt.trest.v0.models.PinnedSale] {
        def writes(obj: com.gilt.gilt.trest.v0.models.PinnedSale) = {
          jsObjectPinnedSale(obj)
        }
      }
    }

    implicit def jsonReadsGiltTrestRegisterForm: play.api.libs.json.Reads[RegisterForm] = {
      (
        (__ \ "name").read[String] and
        (__ \ "username").read[String] and
        (__ \ "password").read[String]
      )(RegisterForm.apply _)
    }

    def jsObjectRegisterForm(obj: com.gilt.gilt.trest.v0.models.RegisterForm) = {
      play.api.libs.json.Json.obj(
        "name" -> play.api.libs.json.JsString(obj.name),
        "username" -> play.api.libs.json.JsString(obj.username),
        "password" -> play.api.libs.json.JsString(obj.password)
      )
    }

    implicit def jsonWritesGiltTrestRegisterForm: play.api.libs.json.Writes[RegisterForm] = {
      new play.api.libs.json.Writes[com.gilt.gilt.trest.v0.models.RegisterForm] {
        def writes(obj: com.gilt.gilt.trest.v0.models.RegisterForm) = {
          jsObjectRegisterForm(obj)
        }
      }
    }

    implicit def jsonReadsGiltTrestUser: play.api.libs.json.Reads[User] = {
      (
        (__ \ "id").read[Int] and
        (__ \ "name").read[String] and
        (__ \ "username").read[String]
      )(User.apply _)
    }

    def jsObjectUser(obj: com.gilt.gilt.trest.v0.models.User) = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsNumber(obj.id),
        "name" -> play.api.libs.json.JsString(obj.name),
        "username" -> play.api.libs.json.JsString(obj.username)
      )
    }

    implicit def jsonWritesGiltTrestUser: play.api.libs.json.Writes[User] = {
      new play.api.libs.json.Writes[com.gilt.gilt.trest.v0.models.User] {
        def writes(obj: com.gilt.gilt.trest.v0.models.User) = {
          jsObjectUser(obj)
        }
      }
    }
  }
}

package com.gilt.gilt.trest.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import com.gilt.gilt.trest.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: Store
    private[this] val enumStoreNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${com.gilt.gilt.trest.v0.models.Store.all.mkString(", ")}"

    implicit val pathBindableEnumStore = new PathBindable.Parsing[com.gilt.gilt.trest.v0.models.Store] (
      Store.fromString(_).get, _.toString, enumStoreNotFound
    )

    implicit val queryStringBindableEnumStore = new QueryStringBindable.Parsing[com.gilt.gilt.trest.v0.models.Store](
      Store.fromString(_).get, _.toString, enumStoreNotFound
    )

  }

}


package com.gilt.gilt.trest.v0 {

  object Constants {

    val Namespace = "com.gilt.gilt.trest.v0"
    val UserAgent = "apidoc:0.11.27 http://www.apidoc.me/gilt/gilt-trest/0.0.9-dev/play_2_4_client"
    val Version = "0.0.9-dev"
    val VersionMajor = 0

  }

  class Client(
    val baseUrl: String,
    auth: scala.Option[com.gilt.gilt.trest.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import com.gilt.gilt.trest.v0.models.json._
    import com.gilt.public.api.models.json._

    private[this] val logger = play.api.Logger("com.gilt.gilt.trest.v0.Client")

    logger.info(s"Initializing com.gilt.gilt.trest.v0.Client for url $baseUrl")

    def pins: Pins = Pins

    def stores: Stores = Stores

    def users: Users = Users

    object Pins extends Pins {
      override def putBySaleKey(
        saleKey: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.gilt.trest.v0.models.Pin] = {
        _executeRequest("PUT", s"/pins/${play.utils.UriEncoding.encodePathSegment(saleKey, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.gilt.trest.v0.Client.parseJson("com.gilt.gilt.trest.v0.models.Pin", r, _.validate[com.gilt.gilt.trest.v0.models.Pin])
          case r if r.status == 400 => throw new com.gilt.gilt.trest.v0.errors.ErrorResponse(r)
          case r if r.status == 401 => throw new com.gilt.gilt.trest.v0.errors.ErrorResponse(r)
          case r => throw new com.gilt.gilt.trest.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 400, 401")
        }
      }
    }

    object Stores extends Stores {
      override def getByStore(
        store: com.gilt.gilt.trest.v0.models.Store,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.gilt.gilt.trest.v0.models.PinnedSale]] = {
        _executeRequest("GET", s"/stores/${play.utils.UriEncoding.encodePathSegment(store.toString, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.gilt.trest.v0.Client.parseJson("Seq[com.gilt.gilt.trest.v0.models.PinnedSale]", r, _.validate[Seq[com.gilt.gilt.trest.v0.models.PinnedSale]])
          case r if r.status == 400 => throw new com.gilt.gilt.trest.v0.errors.ErrorResponse(r)
          case r if r.status == 401 => throw new com.gilt.gilt.trest.v0.errors.ErrorResponse(r)
          case r => throw new com.gilt.gilt.trest.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 400, 401")
        }
      }
    }

    object Users extends Users {
      override def postRegister(
        registerForm: com.gilt.gilt.trest.v0.models.RegisterForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.gilt.trest.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(registerForm)

        _executeRequest("POST", s"/users/register", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.com.gilt.gilt.trest.v0.Client.parseJson("com.gilt.gilt.trest.v0.models.User", r, _.validate[com.gilt.gilt.trest.v0.models.User])
          case r if r.status == 400 => throw new com.gilt.gilt.trest.v0.errors.ErrorResponse(r)
          case r => throw new com.gilt.gilt.trest.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 400")
        }
      }

      override def postLogin(
        loginForm: com.gilt.gilt.trest.v0.models.LoginForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.gilt.trest.v0.models.User] = {
        val payload = play.api.libs.json.Json.toJson(loginForm)

        _executeRequest("POST", s"/users/login", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.com.gilt.gilt.trest.v0.Client.parseJson("com.gilt.gilt.trest.v0.models.User", r, _.validate[com.gilt.gilt.trest.v0.models.User])
          case r if r.status == 401 => throw new com.gilt.gilt.trest.v0.errors.ErrorResponse(r)
          case r => throw new com.gilt.gilt.trest.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {
      import play.api.Play.current

      val holder = play.api.libs.ws.WS.url(baseUrl + path).withHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHeaders(_withJsonContentType(requestHeaders):_*).withQueryString(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHeaders(requestHeaders:_*).withQueryString(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw new com.gilt.gilt.trest.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def pins: com.gilt.gilt.trest.v0.Pins
      def stores: com.gilt.gilt.trest.v0.Stores
      def users: com.gilt.gilt.trest.v0.Users
    }

  }

  trait Pins {
    def putBySaleKey(
      saleKey: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.gilt.trest.v0.models.Pin]
  }

  trait Stores {
    def getByStore(
      store: com.gilt.gilt.trest.v0.models.Store,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[com.gilt.gilt.trest.v0.models.PinnedSale]]
  }

  trait Users {
    def postRegister(
      registerForm: com.gilt.gilt.trest.v0.models.RegisterForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.gilt.trest.v0.models.User]

    def postLogin(
      loginForm: com.gilt.gilt.trest.v0.models.LoginForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.gilt.gilt.trest.v0.models.User]
  }

  package errors {

    import com.gilt.gilt.trest.v0.models.json._
    import com.gilt.public.api.models.json._

    case class ErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val error = _root_.com.gilt.gilt.trest.v0.Client.parseJson("com.gilt.gilt.trest.v0.models.Error", response, _.validate[com.gilt.gilt.trest.v0.models.Error])
    }

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}